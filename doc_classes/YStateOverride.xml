<?xml version="1.0" encoding="UTF-8" ?>
<class name="YStateOverride" inherits="Node" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		A node that manages conditional state overrides based on custom logic.
	</brief_description>
	<description>
		YStateOverride provides a way to create custom state override conditions beyond the basic property checking provided by YState's auto-override system. This is useful for complex conditions that involve multiple checks or custom logic.

		[b]Basic Usage:[/b]
		1. Add a YStateOverride node as a child of the node containing your states
		2. Set the [member override_with_state] to specify which state to transition to
		3. Override [method _override_condition] to define when the override should occur
		4. Optionally set [member ignore_if_state] to prevent overriding during specific states

		[codeblock]
		# Custom override condition example
		extends YStateOverride

		func _override_condition():
		    # Override to attack state if enemy is close and we have enough stamina
		    var enemy_distance = get_parent().get_closest_enemy_distance()
		    var stamina = get_parent().stamina
		    return enemy_distance &lt; 2.0 and stamina &gt; 20.0
		[/codeblock]

		[b]Complex Override Logic:[/b]
		YStateOverride is particularly useful when you need to check multiple conditions or perform complex calculations:

		[codeblock]
		extends YStateOverride

		func _override_condition():
		    # Check multiple conditions for a dodge state
		    var parent = get_parent()
		    
		    # Don't dodge if we recently dodged
		    if parent.time_since_last_dodge &lt; dodge_cooldown:
		        return false
		        
		    # Check if any projectiles are heading towards us
		    for projectile in get_tree().get_nodes_in_group("projectiles"):
		        if is_projectile_threatening(projectile):
		            return true
		            
		    return false
		    
		func is_projectile_threatening(projectile):
		    # Complex logic to determine if we should dodge...
		    return false
		[/codeblock]
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="_on_state_machine_setup" qualifiers="virtual">
			<return type="void" />
			<param index="0" name="fsm" type="YStateMachine" />
			<description>
				Virtual method called when the state machine is being set up. Override to perform initialization that requires access to the state machine.

				[codeblock]
				func _on_state_machine_setup(fsm):
				    # Connect to signals or cache references
				    fsm.state_transitioned.connect(_on_state_changed)
				[/codeblock]
			</description>
		</method>
		<method name="_override_condition" qualifiers="virtual const">
			<return type="bool" />
			<description>
				Virtual method that determines if the state should be overridden. Override this to implement custom override conditions.

				[codeblock]
				func _override_condition():
				    # Example: Override if health is low and healing item is available
				    var parent = get_parent()
				    return parent.health &lt; parent.max_health * 0.3 and parent.has_healing_item()
				[/codeblock]
			</description>
		</method>
	</methods>
	<members>
		<member name="ignore_if_state" type="YState" setter="set_ignore_if_state" getter="get_ignore_if_state">
			If set, prevents this override from occurring when this state is active. Useful for preventing override loops or ensuring certain states complete.
		</member>
		<member name="override_with_state" type="YState" setter="set_override_with_state" getter="get_override_with_state">
			The state to transition to when [method _override_condition] returns true and [member ignore_if_state] is not active.
		</member>
	</members>
</class>
