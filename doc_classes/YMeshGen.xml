<?xml version="1.0" encoding="UTF-8" ?>
<class name="YMeshGen" inherits="RefCounted" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		A utility class for generating 3D meshes with walls, floors, doors, and windows.
	</brief_description>
	<description>
		YMeshGen is a singleton class that provides functionality for procedurally generating 3D meshes with walls, floors, doors, and windows. It uses a grid-based system where each cell can be of different types (inside, outside, door, window, etc.) and automatically generates appropriate geometry.

		The class maintains an internal world state using a grid system where each cell is 2 units wide (defined by TILE_SIZE). Walls are automatically generated between cells of different types (inside vs outside), and special geometry is created for doors and windows.

		Example of basic usage:
		[codeblock]
		var mesh_gen = YMeshGen.new()

		# Create a simple room (coordinates are in grid units)
		mesh_gen.fill_rect(Vector3i(0, 0, 0), Vector3i(4, 0, 4), YMeshGen.Inside)

		# Add a door on one side
		mesh_gen.make_world_change(Vector3i(2, 0, 0), YMeshGen.InsideDoor)

		# Add a window
		mesh_gen.make_world_change(Vector3i(4, 0, 2), YMeshGen.InsideWindow)

		# Get the generated mesh
		var mesh = mesh_gen.rebuild_walls()
		[/codeblock]

		The generated meshes include proper UV coordinates for texturing, and the class provides various properties to customize the appearance of walls, doors, and windows.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="clear_world">
			<return type="void" />
			<description>
				Clears all cells in the world, effectively removing all walls, floors, and other elements. If [member auto_rebuild] is true, this will automatically trigger a mesh rebuild.
			</description>
		</method>
		<method name="create_mesh_from_aabbs_vcolor">
			<return type="Mesh" />
			<param index="0" name="aabbs" type="Rect2[]" />
			<param index="1" name="encompassing_aabb" type="Rect2" />
			<param index="2" name="margin" type="float" default="0.0" />
			<param index="3" name="resolution" type="float" default="1.0" />
			<param index="4" name="push_verts_down" type="float" default="0.0" />
			<description>
				Creates a mesh from a collection of 2D axis-aligned bounding boxes (AABBs). This is useful for generating floor plans or terrain.

				[param aabbs]: Array of Rect2 defining the areas to be meshed.
				[param encompassing_aabb]: A Rect2 that encompasses all input AABBs.
				[param margin]: Additional margin to add around the AABBs.
				[param resolution]: Grid resolution for the generated mesh.
				[param push_verts_down]: Amount to push vertices down on the Y axis within the AABB areas.
			</description>
		</method>
		<method name="create_wall">
			<return type="void" />
			<param index="0" name="wall_center_pos" type="Vector3" />
			<param index="1" name="dir_right" type="Vector3" />
			<param index="2" name="dir_front" type="Vector3" />
			<param index="3" name="desired_byte" type="int" />
			<param index="4" name="height" type="int" />
			<param index="5" name="_unnamed_arg5" type="float" default="2.0" />
			<description>
				Creates a wall segment at the specified position with the given orientation and type.

				[param wall_center_pos]: Center position of the wall segment.
				[param dir_right]: Right direction vector for wall orientation.
				[param dir_front]: Forward direction vector for wall orientation.
				[param desired_byte]: The type of wall to create (use CellType enum values).
				[param height]: Height of the wall segment.
			</description>
		</method>
		<method name="fill_rect">
			<return type="void" />
			<param index="0" name="start" type="Vector3i" />
			<param index="1" name="end" type="Vector3i" />
			<param index="2" name="cell_type" type="int" />
			<description>
				Fills a rectangular area of the world with the specified cell type. Coordinates are in grid units (each unit is 2 world units wide).

				[param start]: Starting corner of the rectangle (inclusive).
				[param end]: Ending corner of the rectangle (inclusive).
				[param cell_type]: Type of cell to fill the area with (use CellType enum values).
			</description>
		</method>
		<method name="get_cell_byte" qualifiers="const">
			<return type="int" />
			<param index="0" name="pos" type="Vector3i" />
			<description>
				Returns the cell type at the specified grid position. Returns [constant CellType.None] if no cell exists at that position.
			</description>
		</method>
		<method name="get_cells_of_type" qualifiers="const">
			<return type="Vector3i[]" />
			<param index="0" name="cell_type" type="int" />
			<description>
				Returns an array of all grid positions that contain cells of the specified type.
			</description>
		</method>
		<method name="get_last_built_mesh" qualifiers="const">
			<return type="ArrayMesh" />
			<description>
				Returns the most recently generated mesh. This is updated whenever [method rebuild_walls] is called.
			</description>
		</method>
		<method name="get_world_bounds_max" qualifiers="const">
			<return type="Vector3" />
			<description>
				Returns the maximum coordinate bounds of the generated world geometry.
			</description>
		</method>
		<method name="get_world_bounds_min" qualifiers="const">
			<return type="Vector3" />
			<description>
				Returns the minimum coordinate bounds of the generated world geometry.
			</description>
		</method>
		<method name="has_wall_at" qualifiers="const">
			<return type="bool" />
			<param index="0" name="pos" type="Vector3i" />
			<description>
				Returns [code]true[/code] if there should be a wall at the specified grid position. A wall exists when adjacent cells are of different types (e.g., inside vs outside).
			</description>
		</method>
		<method name="make_world_change">
			<return type="void" />
			<param index="0" name="pos" type="Vector3i" />
			<param index="1" name="cell_type" type="int" />
			<description>
				Changes the cell type at the specified grid position. If [member auto_rebuild] is true, this will automatically trigger a mesh rebuild.
			</description>
		</method>
		<method name="rebuild_walls">
			<return type="ArrayMesh" />
			<description>
				Regenerates the entire mesh based on the current world state. This should be called after making changes to the world if [member auto_rebuild] is false.
			</description>
		</method>
	</methods>
	<members>
		<member name="auto_rebuild" type="bool" setter="set_auto_rebuild" getter="get_auto_rebuild" default="true">
			If [code]true[/code], the mesh will automatically rebuild when changes are made to the world. If [code]false[/code], you must manually call [method rebuild_walls] after making changes.
		</member>
		<member name="door_width" type="float" setter="set_door_width" getter="get_door_width" default="0.92">
			The width of door openings in world units.
		</member>
		<member name="uv_scale_floor" type="float" setter="set_uv_scale_floor" getter="get_uv_scale_floor" default="0.25">
			Scale factor for UV coordinates on floor surfaces. Adjust this to control texture tiling on floors.
		</member>
		<member name="uv_scale_walls" type="float" setter="set_uv_scale_walls" getter="get_uv_scale_walls" default="0.5">
			Scale factor for UV coordinates on wall surfaces. Adjust this to control texture tiling on walls.
		</member>
		<member name="wall_height" type="float" setter="set_wall_height" getter="get_wall_height" default="2.0">
			The height of walls in world units.
		</member>
		<member name="wall_thickness" type="float" setter="set_wall_thickness" getter="get_wall_thickness" default="0.1">
			The thickness of walls in world units.
		</member>
		<member name="window_width" type="float" setter="set_window_width" getter="get_window_width" default="0.84">
			The width of window openings in world units.
		</member>
	</members>
	<constants>
		<constant name="Inside" value="0" enum="CellType">
		</constant>
		<constant name="InsideDoor" value="1" enum="CellType">
		</constant>
		<constant name="InsideWindow" value="2" enum="CellType">
		</constant>
		<constant name="InsideB" value="3" enum="CellType">
		</constant>
		<constant name="InsideDoorB" value="4" enum="CellType">
		</constant>
		<constant name="InsideDoorB2" value="5" enum="CellType">
		</constant>
		<constant name="InsideWindow2" value="6" enum="CellType">
		</constant>
		<constant name="InsideB2" value="7" enum="CellType">
		</constant>
		<constant name="InsideDoor2" value="8" enum="CellType">
		</constant>
		<constant name="InsideWindow2_2" value="9" enum="CellType">
		</constant>
		<constant name="Inside2" value="10" enum="CellType">
		</constant>
		<constant name="Outside" value="100" enum="CellType">
		</constant>
		<constant name="OutsideDoor" value="101" enum="CellType">
		</constant>
		<constant name="OutsideWindow" value="102" enum="CellType">
		</constant>
		<constant name="None" value="255" enum="CellType">
		</constant>
		<constant name="Wall" value="0" enum="WallType">
		</constant>
		<constant name="Door" value="1" enum="WallType">
		</constant>
		<constant name="Window" value="2" enum="WallType">
		</constant>
		<constant name="SideColumn" value="3" enum="WallType">
		</constant>
		<constant name="SideColumnLeft" value="4" enum="WallType">
		</constant>
		<constant name="SideColumnRight" value="5" enum="WallType">
		</constant>
		<constant name="Floor" value="6" enum="WallType">
		</constant>
	</constants>
</class>
