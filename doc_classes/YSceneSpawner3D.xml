<?xml version="1.0" encoding="UTF-8" ?>
<class name="YSceneSpawner3D" inherits="Node3D" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		A node that handles spawning multiple instances of scenes in a configurable area with various spawn rules and behaviors.
	</brief_description>
	<description>
		YSceneSpawner3D is a utility node that manages spawning multiple instances of scenes within a defined radius. It supports various spawning behaviors including:

		- Random positioning within a circular area
		- Ground alignment
		- Scale randomization
		- Rotation randomization
		- Collision-based placement rules
		- Automatic respawning

		The spawner works by:
		1. Maintaining a list of spawnable scenes that can be configured in the editor or added through code
		2. When spawning, it performs raycasts from above to find valid spawn positions
		3. For each successful position, it instantiates the scene and applies the configured transformations

		[b]Spawn Position Selection:[/b]
		The spawner uses raycasts to find valid spawn positions. For each spawn attempt:
		- A random point is selected within [member placing_radius] of the spawner
		- A raycast is performed downward from 6 units above that point
		- The hit position is validated against various rules ([member prevent_spawn_under], [member prevent_stacking_radius], etc.)
		- If valid, the object is spawned at that position

		[b]Automatic Respawning:[/b]
		When [member respawns_after_time] is set, the spawner will attempt to spawn new objects periodically:
		- Respawning only occurs if current spawn count is below [member respawn_only_until_maximum]
		- Each respawn attempt follows the normal spawn rules
		- The timer is reset after each spawn attempt

		[b]Spawn Rules:[/b]
		Various properties control spawn behavior:
		- [member prevent_stacking_radius]: Prevents spawns too close to other objects
		- [member prevent_spawn_under]/[member force_spawn_under]: Controls height-based spawn restrictions
		- [member lock_to_layer]: Limits what physics layers are valid for spawning
		- [member align_to_ground]: Rotates spawned objects to match surface normal
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_spawnable_scene">
			<return type="void" />
			<param index="0" name="path" type="String" />
			<description>
				Adds a scene at the specified [param path] to the list of spawnable scenes. The scene must be a valid PackedScene resource.
			</description>
		</method>
		<method name="clear_spawnable_scenes">
			<return type="void" />
			<description>
				Removes all scenes from the spawnable scenes list.
			</description>
		</method>
		<method name="free_spawned_objects" qualifiers="const">
			<return type="void" />
			<description>
				Removes all currently spawned objects from the scene tree.
			</description>
		</method>
		<method name="get_spawnable_scene" qualifiers="const">
			<return type="String" />
			<param index="0" name="index" type="int" />
			<description>
				Returns the resource path of the spawnable scene at the given [param index].
			</description>
		</method>
		<method name="get_spawnable_scene_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of scenes in the spawnable scenes list.
			</description>
		</method>
	</methods>
	<members>
		<member name="_spawnable_scenes" type="String[]" setter="_set_spawnable_scenes" getter="_get_spawnable_scenes" default="[]">
			Internal array storing the paths to spawnable scenes. Use the exposed methods to modify this list.
		</member>
		<member name="align_to_ground" type="bool" setter="set_align_to_ground" getter="get_align_to_ground" default="false">
			When enabled, spawned objects will be rotated to align with the surface normal at their spawn position.
		</member>
		<member name="auto_spawn_on_ready" type="bool" setter="set_auto_spawn_on_ready" getter="get_auto_spawn_on_ready" default="false">
			If [code]true[/code], the spawner will automatically spawn objects when entering the scene tree. The spawn is slightly delayed (0.04-0.125 seconds) to ensure proper scene setup.
		</member>
		<member name="debug_show_spawn_area" type="bool" setter="set_debug_show_spawn_area" getter="get_debug_show_spawn_area" default="false">
			Enables visual debugging of the spawn area in the editor.
		</member>
		<member name="debug_spawn_messages" type="bool" setter="set_debug_spawn_messages" getter="get_debug_spawn_messages" default="false">
			When enabled, prints detailed debug messages about spawn attempts and results.
		</member>
		<member name="despawn_when_destroyed" type="bool" setter="set_despawn_when_destroyed" getter="get_despawn_when_destroyed" default="false">
			If [code]true[/code], spawned objects will be removed from the spawner's tracking when they are destroyed.
		</member>
		<member name="force_spawn_under" type="bool" setter="set_force_spawn_under" getter="get_force_spawn_under" default="false">
			When enabled, only allows spawning at positions below [member under_value]. Cannot be used with [member prevent_spawn_under].
		</member>
		<member name="lock_to_layer" type="int" setter="set_lock_to_layer" getter="get_lock_to_layer" default="0">
			Physics layer mask for spawn position raycasts. Only surfaces on these layers will be considered for spawning.
		</member>
		<member name="min_max_random_scale" type="Vector2" setter="set_min_max_random_scale" getter="get_min_max_random_scale" default="Vector2(1, 1)">
			Range for random scaling when [member randomize_scale] is enabled. X component is minimum scale, Y is maximum.
		</member>
		<member name="placing_radius" type="float" setter="set_placing_radius" getter="get_placing_radius" default="10.0">
			Radius around the spawner's position in which objects can be spawned.
		</member>
		<member name="prevent_spawn_under" type="bool" setter="set_prevent_spawn_under" getter="get_prevent_spawn_under" default="false">
			When enabled, prevents spawning at positions below [member under_value]. Cannot be used with [member force_spawn_under].
		</member>
		<member name="prevent_stacking_layer" type="int" setter="set_prevent_stacking_layer" getter="get_prevent_stacking_layer" default="0">
			Physics layer mask used for checking stacking prevention. Only objects on these layers are considered for stacking checks.
		</member>
		<member name="prevent_stacking_radius" type="float" setter="set_prevent_stacking_radius" getter="get_prevent_stacking_radius" default="0.0">
			Minimum required distance between spawn positions and existing objects. Set to 0 to disable stacking prevention.
		</member>
		<member name="random_y_rotate" type="bool" setter="set_random_y_rotate" getter="get_random_y_rotate" default="false">
			When enabled, spawned objects will be randomly rotated around their Y axis.
		</member>
		<member name="random_y_scale" type="bool" setter="set_random_y_scale" getter="get_random_y_scale" default="false">
			Enables independent random scaling of the Y axis, varying by Â±16.6% of the original scale.
		</member>
		<member name="random_z_rotate" type="bool" setter="set_random_z_rotate" getter="get_random_z_rotate" default="false">
			When enabled, spawned objects will be randomly rotated around their Z axis.
		</member>
		<member name="randomize_scale" type="bool" setter="set_randomize_scale" getter="get_randomize_scale" default="false">
			Enables uniform random scaling between [member min_max_random_scale].x and [member min_max_random_scale].y.
		</member>
		<member name="respawn_only_until_maximum" type="int" setter="set_respawn_only_until_maximum" getter="get_respawn_only_until_maximum" default="0">
			Maximum number of spawned objects for automatic respawning. Set to 0 for unlimited respawns.
		</member>
		<member name="respawns_after_time" type="int" setter="set_respawns_after_time" getter="get_respawns_after_time" default="0">
			Time in seconds between automatic respawn attempts. Set to 0 to disable automatic respawning.
		</member>
		<member name="spawn_amount" type="Vector2i" setter="set_spawn_amount" getter="get_spawn_amount" default="Vector2i(1, 1)">
			Range for number of objects to spawn. X component is minimum count, Y is maximum.
		</member>
		<member name="under_value" type="float" setter="set_under_value" getter="get_under_value" default="0.0">
			Height threshold used by [member prevent_spawn_under] and [member force_spawn_under].
		</member>
	</members>
</class>
